// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.11
// Revision: e477e74e05be2411bb0b218a4637de6905e8cd8c
// Build Date: 2022-02-11T00:05:30Z
// Built By: goreleaser

package models

import (
	"fmt"
)

const (
	// MealTypeBreakfast is a MealType of type Breakfast.
	MealTypeBreakfast MealType = iota
	// MealTypeLunch is a MealType of type Lunch.
	MealTypeLunch
	// MealTypeDinner is a MealType of type Dinner.
	MealTypeDinner
	// MealTypeSnacks is a MealType of type Snacks.
	MealTypeSnacks
	// MealTypeSupper is a MealType of type Supper.
	MealTypeSupper
)

const _MealTypeName = "BreakfastLunchDinnerSnacksSupper"

var _MealTypeMap = map[MealType]string{
	MealTypeBreakfast: _MealTypeName[0:9],
	MealTypeLunch:     _MealTypeName[9:14],
	MealTypeDinner:    _MealTypeName[14:20],
	MealTypeSnacks:    _MealTypeName[20:26],
	MealTypeSupper:    _MealTypeName[26:32],
}

// String implements the Stringer interface.
func (x MealType) String() string {
	if str, ok := _MealTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MealType(%d)", x)
}

var _MealTypeValue = map[string]MealType{
	_MealTypeName[0:9]:   MealTypeBreakfast,
	_MealTypeName[9:14]:  MealTypeLunch,
	_MealTypeName[14:20]: MealTypeDinner,
	_MealTypeName[20:26]: MealTypeSnacks,
	_MealTypeName[26:32]: MealTypeSupper,
}

// ParseMealType attempts to convert a string to a MealType.
func ParseMealType(name string) (MealType, error) {
	if x, ok := _MealTypeValue[name]; ok {
		return x, nil
	}
	return MealType(0), fmt.Errorf("%s is not a valid MealType", name)
}
